trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: DockerHubCredentials

steps:
- checkout: self
  displayName: 'Checkout code'

- task: JavaToolInstaller@0
  inputs:
    versionSpec: '11'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'  # Use 'PreInstalled' for the source option
  displayName: 'Set up JDK 11'

- script: mvn clean package
  displayName: 'Build with Maven'

- script: mvn test
  displayName: 'Execute Test Cases'

- script: |
    # Convert repository and branch names to lowercase and replace invalid characters
    sanitizedRepoName=$(echo "$(Build.Repository.Name)" | tr '[:upper:]' '[:lower:]' | tr -c '[:alnum:]' '-')
    sanitizedBranchName=$(echo "$(Build.SourceBranchName)" | tr '[:upper:]' '[:lower:]' | tr -c '[:alnum:]' '-')
    # Remove leading, trailing, and multiple consecutive hyphens
    sanitizedRepoName=$(echo "$sanitizedRepoName" | sed 's/^-*//;s/-*$//;s/--*/-/g')
    sanitizedBranchName=$(echo "$sanitizedBranchName" | sed 's/^-*//;s/-*$//;s/--*/-/g')
    # Ensure no invalid sequences are present
    sanitizedRepoName=$(echo "$sanitizedRepoName" | sed 's/[^a-z0-9-]//g')
    sanitizedBranchName=$(echo "$sanitizedBranchName" | sed 's/[^a-z0-9-]//g')
    echo "##vso[task.setvariable variable=sanitizedRepoName]$sanitizedRepoName"
    echo "##vso[task.setvariable variable=sanitizedBranchName]$sanitizedBranchName"
  displayName: 'Sanitize Repository and Branch Names'

- script: |
    # Check if the repository exists
    repoExists=$(curl -s -o /dev/null -w "%{http_code}" \
    -H "Authorization: Bearer $DOCKER_HUB_ACCESS_TOKEN" \
    "https://hub.docker.com/v2/repositories/$DOCKER_HUB_USERNAME/$sanitizedRepoName/$sanitizedBranchName/")
    
    if [ "$repoExists" -ne 200 ]; then
      # Create the repository if it doesn't exist
      curl -X POST "https://hub.docker.com/v2/repositories/" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $DOCKER_HUB_ACCESS_TOKEN" \
      -d '{
            "name": "'$sanitizedRepoName'/'$sanitizedBranchName'",
            "is_private": false
          }'
    fi
  displayName: 'Check and Create Docker Repository'
  env:
    DOCKER_HUB_ACCESS_TOKEN: $(dockerHubAccessToken)
    DOCKER_HUB_USERNAME: $(dockerHubUsername)

- task: Docker@2
  inputs:
    command: 'login'
    containerRegistry: 'DockerHubServiceConnection'  # Ensure this is the correct service connection name
    username: $(dockerHubUsername)
    password: $(dockerHubAccessToken)
  displayName: 'Log in to Docker Hub'

- task: Docker@2
  inputs:
    command: 'buildAndPush'
    repository: 'sharmapiyush0402/demo'
    dockerfile: 'Dockerfile'  # Adjust this if your Dockerfile is in a different location
    tags: |
      1.0.$(Build.BuildId)
  displayName: 'Build and push Docker image'